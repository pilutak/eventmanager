%% Copyright 2017 <thomas.elsgaard@timezone4.com>
%%
%% Licensed under the Apache License, Version 2.0 (the "License");
%% you may not use this file except in compliance with the License.
%% You may obtain a copy of the License at
%%
%%   http://www.apache.org/licenses/LICENSE-2.0
%%
%% Unless required by applicable law or agreed to in writing, software
%% distributed under the License is distributed on an "AS IS" BASIS,
%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%% See the License for the specific language governing permissions and
%% limitations under the License.

-module(em_hss_association).
-include("../include/em.hrl").

-export([
    create/3,
    delete/2,
    password/2,
    password/3
    ]).
    
%%%===================================================================
%%% API
%%%===================================================================
    
create(User, #{ type := "virtual" } = Attrs, C) ->
    logger:debug("Creating IMS PSI association ~p", [User]),     
    Req = create_psi_association(User, Attrs),
    {Result, _} = send(C, Req),
    Result;

create(User, #{ type := "pilot" } = Attrs, C) ->
    logger:debug("Creating IMS pilot association ~p", [User]),     
    Req = create_association(User, Attrs),
    {Result, _} = send(C, Req),
    Result;

create(User, #{ type := "trunk" } = Attrs, C) ->
    logger:debug("Creating IMS PSI trunk association ~p", [User]),     
    Req = create_psi_association(User, Attrs),
    {Result, _} = send(C, Req),
    Result;

create(User, #{ type := "user" } = Attrs, C) ->
    logger:debug("Creating IMS association ~p", [User]),
    Req = create_association(User, Attrs),
    {Result, _} = send(C, Req),
    Result.
    
delete(User, C) ->
    logger:debug("Deleting IMS association ~p", [User]),    
    Req = delete_association(User),
    {Result, _} = send(C, Req),
    Result.
    
password(User, Password, C) ->
    logger:debug("Updating SIP Password for user: ~p", [User]),    
    Req = set_password(User, Password),
    {Result, _} = send(C, Req),
    Result.

password(User, C) ->
    logger:debug("Updating SIP Password (autogenerated) for user ~p", [User]),    
    Req = set_password(User, em_utils:randchar(14)),
    {Result, _} = send(C, Req),
    Result.


%%%===================================================================
%%% Internal functions
%%%===================================================================
create_association(User, Attrs) ->
    Ns1 = "http://schemas.ericsson.com/ma/HSS/",
    MoType = "IMSAssociation@http://schemas.ericsson.com/ma/HSS/",
    MoId = em_utils:md5_hex(User),
    PubId = maps:get(pubid, Attrs, User),
    Password = maps:get(pass, Attrs, em_utils:randchar(14)),
    ServiceProfileId = maps:get(sprofile, Attrs, PubId),
    Type = maps:get(type, Attrs),    
    ConfiguredServiceProfileId = maps:get(csprofile, Attrs, em_utils:serviceprofile(Type)),
    PhoneContext = maps:get(phonecontext, Attrs, "tg.gl"),
    PrivateUserId = User,
    IMPU = "sip:" ++ PubId,
    {'cai3:Create', [{'xmlns:hss', Ns1}], [
        {'cai3:MOType',[MoType]},
        {'cai3:MOId', [], [
            {'hss:associationId', [], [MoId]}]},
        {'cai3:MOAttributes',[], [
            {'hss:CreateIMSAssociation', [{'associationId', MoId}],[
                    {'hss:associationId',[MoId]},
                    {'hss:chargingProfId',["DefaultChargingProfile"]},
                    {'hss:isPsi',["false"]},
                    {'hss:privateUser', [{'privateUserId', PrivateUserId}],[
                            {'hss:privateUserId',[PrivateUserId]},
                            {'hss:userPassword',[Password]},
                            {'hss:allowedAuthMechanism',["DIGEST"]}]},
                    {'hss:publicData', [{'publicIdValue', IMPU}],[
                            {'hss:publicIdValue',[IMPU]},
                            {'hss:privateUserId',[PrivateUserId]},
                            {'hss:implicitRegSet',["1"]},
                            {'hss:serviceProfileId',[ServiceProfileId]},
                            {'hss:sessionBarringInd',["false"]}]},
                    {'hss:subscriberServiceProfile', [{'serviceProfileId', ServiceProfileId}],[
                            {'hss:serviceProfileId',[ServiceProfileId]},
                            {'hss:configuredServiceProfile', 
                            [{'configuredServiceProfileId', ConfiguredServiceProfileId}],[
                                {'hss:configuredServiceProfileId',[ConfiguredServiceProfileId]}]},
                            {'hss:maxNumberSessions',["99"]},
                            {'hss:phoneContext',[PhoneContext]}]}]}]}]}.
           
    
create_psi_association(User, Attrs) ->
    Ns1 = "http://schemas.ericsson.com/ma/HSS/",
    MoType = "IMSAssociation@http://schemas.ericsson.com/ma/HSS/",
    MoId = em_utils:md5_hex(User), 
    PubId = maps:get(pubid, Attrs, User),
    ServiceProfileId = maps:get(sprofile, Attrs, PubId),
    Type = maps:get(type, Attrs),    
    ConfiguredServiceProfileId = maps:get(csprofile, Attrs, em_utils:serviceprofile(Type)),
    PhoneContext = maps:get(phonecontext, Attrs, "tg.gl"),    
    PrivateUserId = User,
    IMPU = "sip:" ++ PubId,
    {'cai3:Create', [{'xmlns:hss', Ns1}], [
        {'cai3:MOType',[MoType]},
        {'cai3:MOId', [], [
            {'hss:associationId', [], [MoId]}]},
        {'cai3:MOAttributes',[], [
            {'hss:CreateIMSAssociation', [{'associationId', MoId}],[
                    {'hss:associationId',[MoId]},
                    {'hss:chargingProfId',["DefaultChargingProfile"]},
                    {'hss:isPsi',["true"]},
                    {'hss:privateUser', [{'privateUserId', PrivateUserId}],[
                            {'hss:privateUserId',[PrivateUserId]}]},
                    {'hss:publicData', [{'publicIdValue', IMPU}],[
                            {'hss:publicIdValue',[IMPU]},
                            {'hss:privateUserId',[PrivateUserId]},
                            {'hss:implicitRegSet',["0"]},
                            {'hss:serviceProfileId',[ServiceProfileId]},
                            {'hss:sessionBarringInd',["false"]}]},
                    {'hss:subscriberServiceProfile', [{'serviceProfileId', ServiceProfileId}],[
                            {'hss:serviceProfileId',[ServiceProfileId]},
                            {'hss:configuredServiceProfile', 
                            [{'configuredServiceProfileId', ConfiguredServiceProfileId}],[
                                {'hss:configuredServiceProfileId',[ConfiguredServiceProfileId]}]},
                            {'hss:maxNumberSessions',["99"]},
                            {'hss:phoneContext',[PhoneContext]}]}]}]}]}.
                            
set_password(User, Password) ->
    Ns1 = "http://schemas.ericsson.com/ma/HSS/",
    MoType = "IMSAssociation@http://schemas.ericsson.com/ma/HSS/",
    MoId = em_utils:md5_hex(User), 
    PrivateUserId = User,    
    {'cai3:Set', [{'xmlns:hss', Ns1}], [
        {'cai3:MOType',[MoType]},
        {'cai3:MOId', [], [
            {'hss:associationId', [], [MoId]}]},
        {'cai3:MOAttributes',[], [
            {'hss:SetIMSAssociation', [{'associationId', MoId}],[
                    {'hss:privateUser', [{'privateUserId', PrivateUserId}],[
                            {'hss:userPassword',[Password]}]}
                            ]}]}]}.
                                                        
delete_association(User) ->
    Ns1 = "http://schemas.ericsson.com/ma/HSS/",
    MoType = "IMSAssociation@http://schemas.ericsson.com/ma/HSS/",
    MoId = em_utils:md5_hex(User),
    {'cai3:Delete', [{'xmlns:hss', Ns1}], [
        {'cai3:MOType',[MoType]},
        {'cai3:MOId', [], [
            {'hss:associationId', [], [MoId]}]}]}.

send(C, Req) ->
    logger:debug("EMA Req: ~p",[Req]),
    Resp = em_ema:send(C, Req),
    case Resp of
        {ok, Payload} -> {ok, Payload};
        Other -> logger:error("EMA request error: ~p ~p", [Other, Req]),
            Other
    end.